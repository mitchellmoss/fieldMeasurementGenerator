import Canvg from 'canvg/src/Canvg';
import Screen, { IScreenViewBoxConfig } from 'canvg/src/Screen';
import Property from 'canvg/src/Property';
import SVGFontLoader from 'canvg/src/SVGFontLoader';
import Element from 'canvg/src/Document/Element';
import TextNode from 'canvg/src/Document/TextNode';
import ImageElement from 'canvg/src/Document/ImageElement';
import SVGElement from 'canvg/src/Document/SVGElement';
/**
 * Function to create new canvas.
 */
export declare type CreateCanvas = (width: number, height: number) => HTMLCanvasElement | OffscreenCanvas;
/**
 * Function to create new image.
 */
export declare type CreateImage = (src: string, anonymousCrossOrigin?: boolean) => Promise<CanvasImageSource>;
export interface IDocumentOptions {
    /**
     * Default `rem` size.
     */
    rootEmSize?: number;
    /**
     * Default `em` size.
     */
    emSize?: number;
    /**
     * Function to create new canvas.
     */
    createCanvas?: CreateCanvas;
    /**
     * Function to create new image.
     */
    createImage?: CreateImage;
    /**
     * Load images anonymously.
     */
    anonymousCrossOrigin?: boolean;
}
export declare type IViewBoxConfig = Omit<IScreenViewBoxConfig, 'document'>;
declare type DOMDocument = typeof window.document;
declare function createCanvas(width: number, height: number): HTMLCanvasElement;
declare function createImage(src: string, anonymousCrossOrigin?: boolean): Promise<HTMLImageElement>;
export default class Document {
    readonly canvg: Canvg;
    static readonly createCanvas: typeof createCanvas;
    static readonly createImage: typeof createImage;
    static readonly elementTypes: {
        svg: typeof SVGElement;
        rect: typeof import("canvg/src/Document/RectElement").default;
        circle: typeof import("canvg/src/Document/CircleElement").default;
        ellipse: typeof import("canvg/src/Document/EllipseElement").default;
        line: typeof import("canvg/src/Document/LineElement").default;
        polyline: typeof import("canvg/src/Document/PolylineElement").default;
        polygon: typeof import("canvg/src/Document/PolygonElement").default;
        path: typeof import("canvg/src/Document/PathElement").default;
        pattern: typeof import("canvg/src/Document/PatternElement").default;
        marker: typeof import("canvg/src/Document/MarkerElement").default;
        defs: typeof import("canvg/src/Document/DefsElement").default;
        linearGradient: typeof import("canvg/src/Document/LinearGradientElement").default;
        radialGradient: typeof import("canvg/src/Document/RadialGradientElement").default;
        stop: typeof import("canvg/src/Document/StopElement").default;
        animate: typeof import("canvg/src/Document/AnimateElement").default;
        animateColor: typeof import("canvg/src/Document/AnimateColorElement").default;
        animateTransform: typeof import("canvg/src/Document/AnimateTransformElement").default;
        font: typeof import("canvg/src/Document/FontElement").default;
        'font-face': typeof import("canvg/src/Document/FontFaceElement").default;
        'missing-glyph': typeof import("canvg/src/Document/MissingGlyphElement").default;
        glyph: typeof import("canvg/src/Document/GlyphElement").default;
        text: typeof import("canvg/src/Document/TextElement").default;
        tspan: typeof import("canvg/src/Document/TSpanElement").default;
        tref: typeof import("canvg/src/Document/TRefElement").default;
        a: typeof import("canvg/src/Document/AElement").default;
        textPath: typeof import("canvg/src/Document/TextPathElement").default;
        image: typeof ImageElement;
        g: typeof import("canvg/src/Document/GElement").default;
        symbol: typeof import("canvg/src/Document/SymbolElement").default;
        style: typeof import("canvg/src/Document/StyleElement").default;
        use: typeof import("canvg/src/Document/UseElement").default;
        mask: typeof import("canvg/src/Document/MaskElement").default;
        clipPath: typeof import("canvg/src/Document/ClipPathElement").default;
        filter: typeof import("canvg/src/Document/FilterElement").default;
        feDropShadow: typeof import("canvg/src/Document/FeDropShadowElement").default;
        feMorphology: typeof import("canvg/src/Document/FeMorphologyElement").default;
        feComposite: typeof import("canvg/src/Document/FeCompositeElement").default;
        feColorMatrix: typeof import("canvg/src/Document/FeColorMatrixElement").default;
        feGaussianBlur: typeof import("canvg/src/Document/FeGaussianBlurElement").default;
        title: typeof import("canvg/src/Document/TitleElement").default;
        desc: typeof import("canvg/src/Document/DescElement").default;
    };
    rootEmSize: number;
    documentElement: SVGElement;
    readonly screen: Screen;
    readonly createCanvas: CreateCanvas;
    readonly createImage: CreateImage;
    readonly definitions: Record<string, Element>;
    readonly styles: Record<string, Record<string, Property>>;
    readonly stylesSpecificity: Record<string, string>;
    readonly images: ImageElement[];
    readonly fonts: SVGFontLoader[];
    private readonly emSizeStack;
    private uniqueId;
    constructor(canvg: Canvg, { rootEmSize, emSize, createCanvas, createImage, anonymousCrossOrigin }?: IDocumentOptions);
    private bindCreateImage;
    get window(): Window;
    get fetch(): typeof fetch;
    get ctx(): import("canvg/src").RenderingContext2D;
    get emSize(): number;
    set emSize(value: number);
    popEmSize(): void;
    getUniqueId(): string;
    isImagesLoaded(): boolean;
    isFontsLoaded(): boolean;
    createDocumentElement(document: DOMDocument): SVGElement;
    createElement<T extends Element>(node: HTMLElement): T;
    createTextNode(node: HTMLElement): TextNode;
    setViewBox(config: IViewBoxConfig): void;
}
export {};
//# sourceMappingURL=Document.d.ts.map